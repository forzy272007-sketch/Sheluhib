import random
import os
import json
import asyncio
from telethon import TelegramClient
from telethon.tl.types import Channel, Chat, UserStatusOnline, UserStatusRecently, UserStatusLastWeek

from asyncio import Semaphore
from telethon.errors import FloodWaitError

from telethon.tl.functions.messages import GetHistoryRequest
from telethon.tl.types import PeerUser
from telethon.errors import RPCError

# üìÅ –ü–∞–ø–∫–∞ –∑ .session —Ñ–∞–π–ª–∞–º–∏
sessions_folder = 'sessions'
semaphore = Semaphore(3)


# ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
def is_recent(user):
    status = getattr(user, 'status', None)
    return isinstance(
        status, (UserStatusOnline, UserStatusRecently, UserStatusLastWeek))


# üì§ –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ –≤—Å—ñ–º —á–∞—Ç–∞–º –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –∑–∞—Ç—Ä–∏–º–∫–∞–º–∏
async def tag_in_saved_and_send_to_all_chats(client: TelegramClient,
                                             count: int = 2,
                                             delay_between_groups: int = 5):
    try:
        await client.start()
        me = await client.get_me()
        print(f"\nüîì –£–≤—ñ–π—à–ª–∏ —è–∫: {me.username or me.id}")

        saved = await client.get_messages('me', limit=1)
        if not saved or not saved[0].text:
            print("‚ùå –í 'Saved Messages' –Ω–µ–º–∞—î –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
            return

        last_msg = saved[0].text

        dialogs = await client.get_dialogs()
        chats = [
            d.entity for d in dialogs if isinstance(d.entity, (Channel, Chat))
        ]

        # üß† –û–±—Ä–æ–±–ª—è—î–º–æ —á–∞—Ç–∏ –ü–û–°–õ–Ü–î–û–í–ù–û –∑ –æ–±—Ä–æ–±–∫–æ—é FloodWait —ñ –∑–∞—Ç—Ä–∏–º–∫–æ—é –º—ñ–∂ —á–∞—Ç–∞–º–∏
        for chat in chats:
            try:
                await process_chat(client, chat, last_msg, count)
                await asyncio.sleep(delay_between_groups)
            except FloodWaitError as e:
                print(
                    f"‚è≥ –û—Ç—Ä–∏–º–∞–Ω–æ FloodWait: —á–µ–∫–∞—î–º–æ {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —á–∞—Ç–æ–º..."
                )
                await asyncio.sleep(e.seconds)
            except Exception as e:
                print(
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —á–∞—Ç—É {getattr(chat, 'title', '–Ω–µ–≤—ñ–¥–æ–º–æ')}: {e}"
                )

    finally:
        await client.disconnect()

async def process_chat(client, chat, last_msg, count):
    chat_title = getattr(chat, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
    print(f"\nüì® –û–±—Ä–æ–±–∫–∞ —á–∞—Ç—É: {chat_title}")

    recent_participants = []

    try:
        participants = await client.get_participants(chat, limit=200)
        recent_participants = [user for user in participants if is_recent(user)]
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–∞–ø—Ä—è–º—É: {e}")

    # –Ø–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–∞–ª–æ ‚Üí fallback –Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—é
    if len(recent_participants) < count:
        print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö ({len(recent_participants)} < {count}), –ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó")
        try:
            history = await client(GetHistoryRequest(
                peer=chat,
                limit=100,
                offset_date=None,
                offset_id=0,
                max_id=0,
                min_id=0,
                add_offset=0,
                hash=0
            ))

            user_ids = set()
            for msg in history.messages:
                if msg.from_id and isinstance(msg.from_id, PeerUser):
                    user_ids.add(msg.from_id.user_id)
                if len(user_ids) >= count:
                    break

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —é–∑–µ—Ä—ñ–≤ –ø–æ id
            if user_ids:
                users = await client.get_entity(list(user_ids))
                if not isinstance(users, list):
                    users = [users]
                recent_participants.extend(users)

        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")

    if len(recent_participants) < count:
        print(f"‚ö†Ô∏è –í—Å–µ –æ–¥–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ({len(recent_participants)} < {count})")
        return

    selected = random.sample(recent_participants, count)

    zero_width = '\u200B'
    invisible_tags = ''.join(f'[{zero_width}](tg://user?id={user.id})' for user in selected)
    message = last_msg + ' ' + invisible_tags

    try:
        await client.send_message(chat, message, parse_mode='markdown')
        print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑ —Ç–µ–≥–∞–º–∏: {[user.id for user in selected]}")
    except FloodWaitError as e:
        print(f"‚è≥ FloodWait: —Ç—Ä–µ–±–∞ —á–µ–∫–∞—Ç–∏ {e.seconds} —Å–µ–∫.")
        await asyncio.sleep(e.seconds)
        try:
            await client.send_message(chat, message, parse_mode='markdown')
            print(f"‚úÖ (–ü—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è) –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑ —Ç–µ–≥–∞–º–∏: {[user.id for user in selected]}")
        except Exception as e:
            print(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")


# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    print("–í–∏–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:")
    print("1. üîê –í—Ä—É—á–Ω—É (–≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä, API ID/Hash)")
    print("2. üìÇ –ß–µ—Ä–µ–∑ session —Ñ–∞–π–ª–∏")
    mode = input("–í–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2: ").strip()

    if mode == '1':
        try:
            api_id = int(input("–í–≤–µ–¥—ñ—Ç—å API ID: ").strip())
            api_hash = input("–í–≤–µ–¥—ñ—Ç—å API HASH: ").strip()
            phone = input(
                "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ +380...): ").strip()
            session_name = input(
                "–ù–∞–∑–≤–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380...): ").strip()
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è: {e}")
            return

        client = TelegramClient(session_name, api_id, api_hash)
        await client.start(phone=phone)
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞.")

        count = int(
            input(
                "–°–∫—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–µ–≥–Ω—É—Ç–∏ –≤ –∫–æ–∂–Ω–æ–º—É —á–∞—Ç—ñ? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ: "))
        delay_between_groups = int(input("‚è± –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —á–∞—Ç–∞–º–∏ (—Å–µ–∫): "))

        await tag_in_saved_and_send_to_all_chats(client, count,
                                                 delay_between_groups)

    elif mode == '2':
        try:
            api_id = int(
                input("–í–≤–µ–¥—ñ—Ç—å API ID (–æ–¥–∏–Ω –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤): ").strip())
            api_hash = input("–í–≤–µ–¥—ñ—Ç—å API HASH: ").strip()
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è: {e}")
            return

        count = int(
            input(
                "–°–∫—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–µ–≥–Ω—É—Ç–∏ –≤ –∫–æ–∂–Ω–æ–º—É —á–∞—Ç—ñ? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ: "))
        delay_between_groups = int(input("‚è± –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —á–∞—Ç–∞–º–∏ (—Å–µ–∫): "))
        delay_between_cycles = int(
            input("‚ôªÔ∏è –ó–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –∫–æ–ª–∞ –ø–æ –∞–∫–∞—É–Ω—Ç—É (—Å–µ–∫): "))

        session_files = [
            f for f in os.listdir(sessions_folder) if f.endswith('.session')
        ]
        if not session_files:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ .session —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø—Ü—ñ 'sessions'")
            return

        clients = []
        messages = []
        all_chats = []

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Saved Messages + –¥—ñ–∞–ª–æ–≥—ñ–≤
        for session_file in session_files:
            session_path = os.path.join(sessions_folder, session_file)
            client = TelegramClient(session_path.replace('.session', ''),
                                    api_id, api_hash)
            await client.start()
            me = await client.get_me()
            print(f"üîì –£–≤—ñ–π—à–ª–∏ —è–∫: {me.username or me.id}")
            clients.append(client)

            saved = await client.get_messages('me', limit=1)
            if not saved or not saved[0].text:
                print("‚ùå –í 'Saved Messages' —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
                messages.append(None)
            else:
                messages.append(saved[0].text)

            dialogs = await client.get_dialogs()
            chats = [
                d.entity for d in dialogs
                if isinstance(d.entity, (Channel, Chat))
            ]
            all_chats.append(chats)

        # üî• –ë–µ–∑–∫—ñ–Ω–µ—á–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–∑—Å–∏–ª–∫–∏
        cycle = 1
        while True:
            print(f"\n‚ôªÔ∏è –ü–æ—á–∏–Ω–∞—é —Ü–∏–∫–ª ‚Ññ{cycle}\n")
            for i, client in enumerate(clients):
                me = await client.get_me()
                print(f"\nüöÄ –ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É –∑ –∞–∫–∞—É–Ω—Ç–∞ [{me.username or me.id}]")

                for chat in all_chats[i]:
                    msg_text = messages[i]
                    if msg_text is None:
                        continue

                    try:
                        await process_chat(client, chat, msg_text, count)
                        print(
                            f"üì§ –ê–∫–∫–∞—É–Ω—Ç [{me.username or me.id}] –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç: {getattr(chat, 'title', '–Ω–µ–≤—ñ–¥–æ–º–æ')}"
                        )
                    except FloodWaitError as e:
                        print(f"‚è≥ FloodWait {e.seconds} —Å–µ–∫. –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞ [{me.username or me.id}]")
                        await asyncio.sleep(e.seconds)
                        try:
                            await process_chat(client, chat, msg_text, count)
                        except Exception as e:
                            print(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è: {e}")
                    except Exception as e:
                        print(
                            f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ –∞–∫–∞—É–Ω—Ç–∞ [{me.username or me.id}], —á–∞—Ç {getattr(chat, 'title', '–Ω–µ–≤—ñ–¥–æ–º–æ')}: {e}"
                        )

                    await asyncio.sleep(delay_between_groups)

                print(
                    f"üò¥ –ó–∞—Ç—Ä–∏–º–∫–∞ {delay_between_cycles} —Å–µ–∫. –ø—ñ—Å–ª—è –∞–∫–∞—É–Ω—Ç–∞ [{me.username or me.id}]"
                )
                await asyncio.sleep(delay_between_cycles)

            print(f"\n‚úÖ –£—Å—ñ –∞–∫–∞—É–Ω—Ç–∏ –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–ª–∏. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É...\n")
            cycle += 1

    else:
        print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –í–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2.")

if __name__ == "__main__":
    asyncio.run(main())
